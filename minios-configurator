#!/bin/bash

# MiniOS Configurator
# A graphical tool for configuring MiniOS settings
# Allows modifying parameters in /etc/minios/minios.conf
#
# Usage: minios-configurator [/path/to/config/file]
# If no config file path is provided, it defaults to /etc/minios/minios.conf
#
# Author: crims0n. <http://minios.dev>

# Set text domain
export TEXTDOMAIN="minios-configurator"

# Display an error message
error() {
    local MESSAGE="${1-}"
    local TITLE="${2-$(gettext "Error")}"
    yad --error --center --borders=10 --window-icon="dialog-error" --title="$TITLE" --text="$MESSAGE"
}

# Display a warning message
warning() {
    local MESSAGE="${1-}"
    local TITLE="${2-$(gettext "Warning")}"
    yad --warning --center --borders=10 --window-icon="dialog-warning" --title="$TITLE" --text="$MESSAGE"
}

# Display an information message
information() {
    local MESSAGE="${1-}"
    local TITLE="${2-$(gettext "Information")}"
    yad --info --center --borders=10 --window-icon="dialog-information" --title="$TITLE" --text="$MESSAGE"
}

# Function to read configuration from a file and set variables based on the specified key list
# Usage: read_config <CONFIG_FILE> <KEYLIST...>
# Example: read_config "/path/to/config.conf" "USER_NAME" "USER_PASSWORD" "HOST_NAME"
read_config() {
    shopt -s extglob
    local CONFIG_FILE="${1}"
    local KEYLIST="${@:2}"
    if [[ ! "$CONFIG_FILE" ]]; then
        error "No configuration file given"
        exit 1
    fi
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not a file!"
        exit 1
    fi
    if [[ ! -r "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not readable!"
        exit 1
    fi
    KEYLIST="${KEYLIST// /|}"
    while IFS='= ' read -r LHS RHS; do
        if [[ "${LHS}" =~ ^(${KEYLIST})$ ]] && [[ -n ${RHS} ]]; then
            RHS="${RHS%\"*}"
            RHS="${RHS#\"*}"
            RHS="${RHS%\'*}"
            RHS="${RHS#\'*}"
            if [[ "${RHS}" =~ ^\((.*)\)$ ]]; then
                eval ${LHS}=\("${BASH_REMATCH[1]}"\)
            else
                eval ${LHS}=\"${RHS}\"
            fi
        fi
    done <<<"$(tr -d '\r' <${CONFIG_FILE})"
    shopt -u extglob
}

# Function to update configuration file with new values for specified arguments
# Usage: update_config <CONFIG_FILE> [<ARG1> <ARG2> ...]
# If no arguments are provided, all variables in the config file will be updated
# Example: update_config "/path/to/config.conf" "USER_NAME" "HOST_NAME"
update_config() {
    local CONFIG_FILE="${1}"
    shift
    if [[ ! "$CONFIG_FILE" ]]; then
        error "No configuration file given"
        exit 1
    fi
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not a file!"
        exit 1
    fi
    if [[ ! -r "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not readable!"
        exit 1
    fi
    local -a ARGS
    if (($# > 0)); then
        ARGS=("$@")
    else
        ARGS=($(grep -v '^#' "${CONFIG_FILE}" | awk -F '=' '{print $1}'))
    fi
    for ARG in "${ARGS[@]}"; do
        local -n VAR="${ARG}"
        local NEW_VALUE ELEMENT
        if [[ -z "${VAR+x}" ]]; then
            continue
        fi
        case "$(declare -p "${ARG}" 2>/dev/null)" in
        "declare -a"*)
            NEW_VALUE="${ARG}=("
            for ELEMENT in "${VAR[@]}"; do
                NEW_VALUE+="\"${ELEMENT}\""
                [[ "${ELEMENT}" != "${VAR[-1]}" ]] && NEW_VALUE+=" "
            done
            NEW_VALUE+=")"
            ;;
        *)
            NEW_VALUE="${ARG}=\"${VAR}\""
            ;;
        esac
        if grep -q "^${ARG}=" "${CONFIG_FILE}"; then
            sed -i "s|^${ARG}=.*|${NEW_VALUE}|" "${CONFIG_FILE}"
        else
            echo -e "\n${NEW_VALUE}" >>"${CONFIG_FILE}"
        fi
    done
}

# Check if the script is running as root, if not, run with root privileges using pkexec
check_root_permissions() {
    if [[ "${EUID}" -ne 0 ]]; then
        pkexec "$0" "$@"
        exit 0
    fi
}

validate_username() {
    if [[ ${#1} -gt 32 || "$1" =~ ^[-+~] || "$1" =~ ^[0-9]+$ || "$1" =~ [^a-zA-Z0-9_\$] || "$1" =~ \. || "$1" =~ "[:/, ]" ]]; then
        return 1
    else
        return 0
    fi
}

validate_hostname() {
    if [[ ${#1} -lt 2 || ${#1} -gt 63 || ! "$1" =~ ^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$ ]]; then
        return 1
    else
        return 0
    fi
}

validate_password() {
    if [[ "$1" =~ [[:space:]\'] ]]; then
        return 1
    else
        return 0
    fi
}


# Call the function to check root permissions
check_root_permissions "$@"


CONFIG_FILE="${1:-/etc/minios/minios.conf}"
KEYS=('USER_NAME' 'USER_PASSWORD' 'ROOT_PASSWORD' 'HOST_NAME' 'DEFAULT_TARGET' 'ENABLE_SERVICES' 'DISABLE_SERVICES' 'SSH_KEY' 'SCRIPTS' 'HIDE_CREDENTIALS' 'AUTOLOGIN' 'ELEVATION_PASSWORD_REQUIRED' 'SYSTEM_TYPE' 'EXPORT_LOGS' 'LINK_USER_DIRS')

read_config "$CONFIG_FILE" "${KEYS[@]}"

DEFAULT_TARGETS=('graphical' 'multi-user' 'rescue')
DEFAULT_TARGET="${DEFAULT_TARGET%.target}"
DEFAULT_TARGET_FIELD="$DEFAULT_TARGET!$(printf "%s\n" "${DEFAULT_TARGETS[@]/$DEFAULT_TARGET/}" | grep -v '^$' | tr '\n' '!' | sed 's/!$//')"

SYSTEM_TYPES=('classic' 'puzzle')
SYSTEM_TYPE_FIELD="$SYSTEM_TYPE!$(printf "%s\n" "${SYSTEM_TYPES[@]/$SYSTEM_TYPE/}" | grep -v '^$' | tr '\n' '!' | sed 's/!$//')"

while true; do
    FORM_OUTPUT=$(
        yad --form --center --title="$(gettext "MiniOS Configurator")" \
            --borders=10 \
            --window-icon="preferences-system" \
            --width=500 \
            --text="<span>$(gettext 'You can read more about the parameters in man minios-configurator')\n\n</span><span font-size=\"large\">$(gettext 'Select configuration options for MiniOS')\n</span>" \
            --text-align="center" \
            --field="$(gettext "Username")" "$USER_NAME" \
            --field="$(gettext "User password")" "$USER_PASSWORD" \
            --field="$(gettext "Root password")" "$ROOT_PASSWORD" \
            --field="$(gettext "Hostname")" "$HOST_NAME" \
            --field="$(gettext "System type"):CB" "$SYSTEM_TYPE_FIELD" \
            --field="$(gettext "Default SystemD target"):CB" "$DEFAULT_TARGET_FIELD" \
            --field="$(gettext "Enable services (delimiter ,)")" "$ENABLE_SERVICES" \
            --field="$(gettext "Disable services (delimiter ,)")" "$DISABLE_SERVICES" \
            --field="$(gettext "SSH key name on flash drive")" "$SSH_KEY" \
            --field="$(gettext "Executing scripts on boot"):CHK" "$SCRIPTS" \
            --field="$(gettext "Hide credentials"):CHK" "$HIDE_CREDENTIALS" \
            --field="$(gettext "Autologin"):CHK" "$AUTOLOGIN" \
            --field="$(gettext "Require password for sudo/pkexec"):CHK" "$ELEVATION_PASSWORD_REQUIRED" \
            --field="$(gettext "Link user directories to storage"):CHK" "$LINK_USER_DIRS" \
            --field="$(gettext "Export logs to flash drive"):CHK" "$EXPORT_LOGS"
    )

    if [ "$?" = 252 ] || [ -z "$FORM_OUTPUT" ]; then
        exit 1
    fi

    IFS='|' read -r FORM_USER_NAME FORM_USER_PASSWORD FORM_ROOT_PASSWORD FORM_HOST_NAME FORM_SYSTEM_TYPE FORM_DEFAULT_TARGET FORM_ENABLE_SERVICES FORM_DISABLE_SERVICES FORM_SSH_KEY FORM_SCRIPTS FORM_HIDE_CREDENTIALS FORM_AUTOLOGIN FORM_ELEVATION_PASSWORD_REQUIRED FORM_LINK_USER_DIRS FORM_EXPORT_LOGS <<<"$FORM_OUTPUT"

    # Convert boolean values to lowercase
    FORM_SCRIPTS=$(echo "$FORM_SCRIPTS" | tr '[:upper:]' '[:lower:]')
    FORM_HIDE_CREDENTIALS=$(echo "$FORM_HIDE_CREDENTIALS" | tr '[:upper:]' '[:lower:]')
    FORM_AUTOLOGIN=$(echo "$FORM_AUTOLOGIN" | tr '[:upper:]' '[:lower:]')
    FORM_ELEVATION_PASSWORD_REQUIRED=$(echo "$FORM_ELEVATION_PASSWORD_REQUIRED" | tr '[:upper:]' '[:lower:]')
    FORM_LINK_USER_DIRS=$(echo "$FORM_LINK_USER_DIRS" | tr '[:upper:]' '[:lower:]')
    FORM_EXPORT_LOGS=$(echo "$FORM_EXPORT_LOGS" | tr '[:upper:]' '[:lower:]')

    if validate_username "$FORM_USER_NAME" && validate_hostname "$FORM_HOST_NAME" && validate_password "$FORM_USER_PASSWORD" && validate_password "$FORM_ROOT_PASSWORD"; then
        USER_NAME="$FORM_USER_NAME"
        USER_PASSWORD="$FORM_USER_PASSWORD"
        ROOT_PASSWORD="$FORM_ROOT_PASSWORD"
        HOST_NAME="$FORM_HOST_NAME"
        ENABLE_SERVICES="$FORM_ENABLE_SERVICES"
        DISABLE_SERVICES="$FORM_DISABLE_SERVICES"
        SSH_KEY="$FORM_SSH_KEY"
        DEFAULT_TARGET="$FORM_DEFAULT_TARGET"
        SYSTEM_TYPE="$FORM_SYSTEM_TYPE"
        SCRIPTS="$FORM_SCRIPTS"
        HIDE_CREDENTIALS="$FORM_HIDE_CREDENTIALS"
        AUTOLOGIN="$FORM_AUTOLOGIN"
        ELEVATION_PASSWORD_REQUIRED="$FORM_ELEVATION_PASSWORD_REQUIRED"
        LINK_USER_DIRS="$FORM_LINK_USER_DIRS"
        EXPORT_LOGS="$FORM_EXPORT_LOGS"
        break
    else
        if ! validate_username "$FORM_USER_NAME"; then
            error "$(gettext "Invalid username. Read 'man useradd' for more information.")" "Invalid Username"
        fi
        if ! validate_hostname "$FORM_HOST_NAME"; then
            error "$(gettext "Hostname must contain only letters (a-z, A-Z), digits (0-9), or dashes, start and end with a letter or number, and be between 2 to 63 characters long.")" "Invalid Hostname"
        fi
        if ! validate_password "$FORM_USER_PASSWORD"; then
            error "$(gettext "User password should not contain spaces or single quotes.")" "Invalid Password"
        fi
        if ! validate_password "$FORM_ROOT_PASSWORD"; then
            error "$(gettext "Root password should not contain spaces or single quotes.")" "Invalid Password"
        fi
    fi
done

update_config -a "$CONFIG_FILE" "${KEYS[@]}"

if [ "$CONFIG_FILE" = "/etc/minios/minios.conf" ]; then
    yad --form --center \
        --borders=10 \
        --window-icon="preferences-system" \
        --title="$(gettext 'Reminder')" \
        --text="<span>\n\n\n$(gettext 'You will need to reboot your system to apply the settings.')</span>" \
        --text-align="center" \
        --width=400 \
        --buttons-layout="center" \
        --on-top \
        --form \
        --button=Ok:0
fi
